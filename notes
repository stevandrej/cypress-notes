Cypress

npm install cypress --save-dev
npm install @types/cypress --save-dev

npx cypress open
npx cypress run (CLI run)
———————————————————————

For enabling autocomplete in VSCode
/// <reference types="Cypress" />

Preferred selectors data-cy
———————————————————————

Assertions
https://docs.cypress.io/guides/references/assertions

Api commands “and”
https://docs.cypress.io/api/commands/and
———————————————————————

Reusable variables, values, aliases

// Should not be used
const btn = cy.get(‘[data-cy=“submit-btn”]’) ======>>>  returns Cypress.Chainable<JQuery<HTMLElement>>
- cypress creates queue of sets aka. instructions, so cy.get(‘[data-cy=“”]’) doesn’t return HTML Element, but an instruction.
Should be use as following:

Define alias: cy.get(‘[data-cy=“submit-btn”]’).as(‘submitBtn’);

Usage:
cy.get(‘@submitBtn’).click();

Accessing elements (subjects, still not the exact html el, but a wrapper object of it) can be done with .then()
    cy.get('[data-cy="contact-btn-submit"]').then((el) => {
      expect(el).to.have.text("Send Message");
    });
———————————————————————

Code repetition 

* beforeEach()
* afterEach()

describe(’Some name’, ()=>{ 	before(()=>{ 		// runs only once, before all tests
	})
	beforeEach(()=>{
		//runs before every test
		//ex. 
		cy.visit(‘/about’);
		// seeding a database…
	});
	afterEach(()=>{ });
	after(()=>{ })
… })

———————————————————————

Creating custom command

cypress
	- support
		- commands.js

// example:
Cypress.Commands.add("submitForm", () => {
  cy.get('form button[type="submit"').click();
});

Don’t overuse it
	less readable
	need to dive into the file to find out what the command does.

———————————————————————

Creating custom query

Cypress.Commands.addQuery("getById", (id) => {
  return () => {
    return cy.get(`[data-cy="${id}"]`);
  };
});

usage: 	cy.getById(‘message’)

———————————————————————

Creating Tasks

	- cypress.config.js

in —> defineConfig({
	e2e: { 		…
		setupNodeEvents(on, config) { 			on(‘task’, { 				seedDatabase(optionalParams){
					// Run your NodeJS code
					// e.g. edit a file here
					return filename; //optional, can return but don’t have to
				}
			});
		}
	}
})

usage: will be executed when cy.task(‘seedDatabase’, filename.csv).then(returnValue =>{ // use the returned value - optional }) is called.
———————————————————————

Stubs and Spies

Stubs: Replace existing methods;
	Override browser default api functions like window.navigator.geolocation

Spies: Add listeners to existing methods;
	Check if set/get localStorage has been called.

———————————————————————

Fixtures

in folder - fixtures / example-data.json

Store dummy testing data in central place
Access via fixtures() and use in your tests.

———————————————————————

Clock

Manipulating time
cy.clock()  - on test initialization
cy.tick(2000)   - then in the test calling tick to skip some time in milliseconds

———————————————————————

Application Setup / usage of Cypress

- separate database from production
- Clear and seed database for every test:
—> cypress.config.js
	setupNodeEvents(on, config) {
          // implement node event listeners here
          on('task', {
           async seedDatabase() {
           await seed();
           return null;
          }
        })
       },

in  —> e2e/test.cy.js test file describe("Takeaways", () => {
  beforeEach(() => {
    cy.task('seedDatabase');
  });
…
—————————
Interceptor

    cy.intercept("POST", "/newsletter*", {
      status: 201,
    }).as("subscribe");
…
// not always necessary 
    cy.wait("@subscribe");

Sending http requests
it("should successfully create a new contact", () => {
    cy.request({
      method: "POST",
      url: "/newsletter",
      body: {
        email: "test@example.com",
      },
      form: true,
    }).then((response) => {
      expect(response.status).to.eq(201);
    });
  });

